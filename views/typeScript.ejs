<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TypeScript Quiz</title>
    <link rel="shortcut icon" sizes="64x64" href="logo.png" type="image/x-icon">
    <link rel="stylesheet" href="typeScript.css">
    <script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
</head>

<body>

    <h1>TypeScript Quiz</h1>
    <form id="quiz-form">
        <div class="question" data-aos="zoom-in">
            <p>1. What is TypeScript?</p>
            <label><input type="radio" name="q1" value="A"> A) A superset of JavaScript</label><br>
            <label><input type="radio" name="q1" value="B"> B) A JavaScript framework</label><br>
            <label><input type="radio" name="q1" value="C"> C) A database</label><br>
            <label><input type="radio" name="q1" value="D"> D) A programming language that compiles to Java</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>2. Which of the following is a valid TypeScript type for a string?</p>
            <label><input type="radio" name="q2" value="A"> A) string</label><br>
            <label><input type="radio" name="q2" value="B"> B) String</label><br>
            <label><input type="radio" name="q2" value="C"> C) Str</label><br>
            <label><input type="radio" name="q2" value="D"> D) Text</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>3. How do you define a variable in TypeScript?</p>
            <label><input type="radio" name="q3" value="A"> A) var x: number;</label><br>
            <label><input type="radio" name="q3" value="B"> B) let x: number;</label><br>
            <label><input type="radio" name="q3" value="C"> C) const x: number;</label><br>
            <label><input type="radio" name="q3" value="D"> D) All of the above</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>4. What keyword is used to create a class in TypeScript?</p>
            <label><input type="radio" name="q4" value="A"> A) function</label><br>
            <label><input type="radio" name="q4" value="B"> B) class</label><br>
            <label><input type="radio" name="q4" value="C"> C) object</label><br>
            <label><input type="radio" name="q4" value="D"> D) type</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>5. What does the any type in TypeScript represent?</p>
            <label><input type="radio" name="q5" value="A"> A) A type that can hold any value</label><br>
            <label><input type="radio" name="q5" value="B"> B) A type that can hold only numbers</label><br>
            <label><input type="radio" name="q5" value="C"> C) A type that cannot be used</label><br>
            <label><input type="radio" name="q5" value="D"> D) A type that is undefined</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>6. Which of the following is NOT a primitive type in TypeScript?</p>
            <label><input type="radio" name="q6" value="A"> A) string</label><br>
            <label><input type="radio" name="q6" value="B"> B) boolean</label><br>
            <label><input type="radio" name="q6" value="C"> C) number</label><br>
            <label><input type="radio" name="q6" value="D"> D) object</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>7. How do you declare an array of numbers in TypeScript?</p>
            <label><input type="radio" name="q7" value="A"> A) let arr: number[];</label><br>
            <label><input type="radio" name="q7" value="B"> B) let arr: Array<number>;</label><br>
            <label><input type="radio" name="q7" value="C"> C) Both A and B</label><br>
            <label><input type="radio" name="q7" value="D"> D) let arr: num[];</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>8. What does the void type represent?</p>
            <label><input type="radio" name="q8" value="A"> A) A function that returns a value</label><br>
            <label><input type="radio" name="q8" value="B"> B) A function that does not return a value</label><br>
            <label><input type="radio" name="q8" value="C"> C) An empty object</label><br>
            <label><input type="radio" name="q8" value="D"> D) An undefined variable</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>9. How do you create a tuple in TypeScript?</p>
            <label><input type="radio" name="q9" value="A"> A) let tuple: [number, string];</label><br>
            <label><input type="radio" name="q9" value="B"> B) let tuple: (number, string);</label><br>
            <label><input type="radio" name="q9" value="C"> C) let tuple: {number, string};</label><br>
            <label><input type="radio" name="q9" value="D"> D) let tuple: [string, number];</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>10. What will happen if you try to assign a string to a variable declared as a number?</p>
            <label><input type="radio" name="q10" value="A"> A) It will work without issues</label><br>
            <label><input type="radio" name="q10" value="B"> B) It will throw a compile-time error</label><br>
            <label><input type="radio" name="q10" value="C"> C) It will convert the string to a number</label><br>
            <label><input type="radio" name="q10" value="D"> D) It will assign NaN</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>11. How do you define a function in TypeScript?</p>
            <label><input type="radio" name="q11" value="A"> A) function myFunc(): void {}</label><br>
            <label><input type="radio" name="q11" value="B"> B) function myFunc() => void {}</label><br>
            <label><input type="radio" name="q11" value="C"> C) function myFunc: void {}</label><br>
            <label><input type="radio" name="q11" value="D"> D) def myFunc(): void {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>12. What is an interface in TypeScript?</p>
            <label><input type="radio" name="q12" value="A"> A) A blueprint for objects</label><br>
            <label><input type="radio" name="q12" value="B"> B) A way to create a class</label><br>
            <label><input type="radio" name="q12" value="C"> C) A primitive data type</label><br>
            <label><input type="radio" name="q12" value="D"> D) A function type</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>13. How do you declare an interface in TypeScript?</p>
            <label><input type="radio" name="q13" value="A"> A) interface MyInterface {}</label><br>
            <label><input type="radio" name="q13" value="B"> B) type MyInterface {}</label><br>
            <label><input type="radio" name="q13" value="C"> C) class MyInterface {}</label><br>
            <label><input type="radio" name="q13" value="D"> D) define MyInterface {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>14. What is the correct syntax to implement an interface in a class?</p>
            <label><input type="radio" name="q14" value="A"> A) class MyClass implements MyInterface {}</label><br>
            <label><input type="radio" name="q14" value="B"> B) class MyClass extends MyInterface {}</label><br>
            <label><input type="radio" name="q14" value="C"> C) class MyClass: MyInterface {}</label><br>
            <label><input type="radio" name="q14" value="D"> D) class MyClass interface MyInterface {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>15. How do you define a function type in TypeScript?</p>
            <label><input type="radio" name="q15" value="A"> A) type MyFunc = (param: number) => void;</label><br>
            <label><input type="radio" name="q15" value="B"> B) function MyFunc(param: number): void;</label><br>
            <label><input type="radio" name="q15" value="C"> C) interface MyFunc(param: number): void;</label><br>
            <label><input type="radio" name="q15" value="D"> D) let MyFunc: (number) => void;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>16. How do you define optional properties in an interface?</p>
            <label><input type="radio" name="q16" value="A"> A) prop?: string;</label><br>
            <label><input type="radio" name="q16" value="B"> B) prop: string?;</label><br>
            <label><input type="radio" name="q16" value="C"> C) prop!: string;</label><br>
            <label><input type="radio" name="q16" value="D"> D) optional prop: string;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>17. How can you create a read-only property in an interface?</p>
            <label><input type="radio" name="q17" value="A"> A) readonly prop: string;</label><br>
            <label><input type="radio" name="q17" value="B"> B) const prop: string;</label><br>
            <label><input type="radio" name="q17" value="C"> C) prop: readonly string;</label><br>
            <label><input type="radio" name="q17" value="D"> D) prop: string readonly;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>18. What does the this keyword refer to in a class method in TypeScript?</p>
            <label><input type="radio" name="q18" value="A"> A) The global object</label><br>
            <label><input type="radio" name="q18" value="B"> B) The class instance</label><br>
            <label><input type="radio" name="q18" value="C"> C) The parent class</label><br>
            <label><input type="radio" name="q18" value="D"> D) None of the above</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>19. How do you create a generic function in TypeScript?</p>
            <label><input type="radio" name="q19" value="A"> A) function myFunc<T>(arg: T): T { return arg; }</label><br>
            <label><input type="radio" name="q19" value="B"> B) function myFunc(arg: T): T { return arg; }</label><br>
            <label><input type="radio" name="q19" value="C"> C) function myFunc<T>(arg: any): T { return arg; }</label><br>
            <label><input type="radio" name="q19" value="D"> D) generic function myFunc<T>(arg: T) { return arg; }</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>20. What does the extends keyword do in TypeScript?</p>
            <label><input type="radio" name="q20" value="A"> A) It defines a function</label><br>
            <label><input type="radio" name="q20" value="B"> B) It creates an alias</label><br>
            <label><input type="radio" name="q20" value="C"> C) It creates a subclass</label><br>
            <label><input type="radio" name="q20" value="D"> D) It creates an interface</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>21. What is a union type in TypeScript?</p>
            <label><input type="radio" name="q21" value="A"> A) A type that can be one of several types</label><br>
            <label><input type="radio" name="q21" value="B"> B) A type that combines multiple types</label><br>
            <label><input type="radio" name="q21" value="C"> C) A type that represents all types</label><br>
            <label><input type="radio" name="q21" value="D"> D) A type that cannot be defined</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>22. How do you create a union type?</p>
            <label><input type="radio" name="q22" value="A"> A) let x: string | number;</label><br>
            <label><input type="radio" name="q22" value="B"> B) let x: (string, number);</label><br>
            <label><input type="radio" name="q22" value="C"> C) let x: string & number;</label><br>
            <label><input type="radio" name="q22" value="D"> D) let x: string or number;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>23. What is an intersection type?</p>
            <label><input type="radio" name="q23" value="A"> A) A type that combines multiple types</label><br>
            <label><input type="radio" name="q23" value="B"> B) A type that is only one type</label><br>
            <label><input type="radio" name="q23" value="C"> C) A type that can be one of several types</label><br>
            <label><input type="radio" name="q23" value="D"> D) None of the above</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>24. How do you define a type alias?</p>
            <label><input type="radio" name="q24" value="A"> A) type MyType = { prop: string };</label><br>
            <label><input type="radio" name="q24" value="B"> B) let MyType = { prop: string };</label><br>
            <label><input type="radio" name="q24" value="C"> C) interface MyType = { prop: string };</label><br>
            <label><input type="radio" name="q24" value="D"> D) const MyType: { prop: string };</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>25. What is the purpose of the as keyword in TypeScript?</p>
            <label><input type="radio" name="q25" value="A"> A) To declare a variable</label><br>
            <label><input type="radio" name="q25" value="B"> B) To define a type alias</label><br>
            <label><input type="radio" name="q25" value="C"> C) To assert a type</label><br>
            <label><input type="radio" name="q25" value="D"> D) To import a module</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>26. How can you make a type nullable in TypeScript?</p>
            <label><input type="radio" name="q26" value="A"> A) let x: string | null;</label><br>
            <label><input type="radio" name="q26" value="B"> B) let x: nullable string;</label><br>
            <label><input type="radio" name="q26" value="C"> C) let x: string?;</label><br>
            <label><input type="radio" name="q26" value="D"> D) let x: null | string;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>27. What is a mapped type in TypeScript?</p>
            <label><input type="radio" name="q27" value="A"> A) A type that transforms properties of another type</label><br>
            <label><input type="radio" name="q27" value="B"> B) A type that defines a function</label><br>
            <label><input type="radio" name="q27" value="C"> C) A type that extends another type</label><br>
            <label><input type="radio" name="q27" value="D"> D) A type that is union of all types</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>28. How do you define a default parameter in TypeScript?</p>
            <label><input type="radio" name="q28" value="A"> A) function myFunc(param: number = 10) {}</label><br>
            <label><input type="radio" name="q28" value="B"> B) function myFunc(param: number): number = 10 {}</label><br>
            <label><input type="radio" name="q28" value="C)> function myFunc(param: number): number { return param; }</label><br>
            <label><input type="radio" name="q28" value="D"> D) let myFunc(param: number = 10) {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>29. What is the purpose of the declare keyword?</p>
            <label><input type="radio" name="q29" value="A"> A) To declare a variable</label><br>
            <label><input type="radio" name="q29" value="B"> B) To declare a module</label><br>
            <label><input type="radio" name="q29" value="C"> C) To declare a type</label><br>
            <label><input type="radio" name="q29" value="D"> D) To declare a global variable</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>30. What does the ! operator do in TypeScript?</p>
            <label><input type="radio" name="q30" value="A"> A) It negates a boolean</label><br>
            <label><input type="radio" name="q30" value="B"> B) It asserts a non-null value</label><br>
            <label><input type="radio" name="q30" value="C"> C) It defines an optional property</label><br>
            <label><input type="radio" name="q30" value="D"> D) It creates a union type</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>31. What does the ? operator indicate in TypeScript?</p>
            <label><input type="radio" name="q31" value="A"> A) A required property</label><br>
            <label><input type="radio" name="q31" value="B"> B) An optional property</label><br>
            <label><input type="radio" name="q31" value="C"> C) A union type</label><br>
            <label><input type="radio" name="q31" value="D"> D) A type assertion</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>32. How do you define a constructor in a TypeScript class?</p>
            <label><input type="radio" name="q32" value="A"> A) constructor() {}</label><br>
            <label><input type="radio" name="q32" value="B"> B) function constructor() {}</label><br>
            <label><input type="radio" name="q32" value="C"> C) class constructor() {}</label><br>
            <label><input type="radio" name="q32" value="D"> D) define constructor() {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>33. What is the purpose of the super keyword?</p>
            <label><input type="radio" name="q33" value="A"> A) To call the parent class constructor</label><br>
            <label><input type="radio" name="q33" value="B"> B) To create a new instance of a class</label><br>
            <label><input type="radio" name="q33" value="C"> C) To define a method in a class</label><br>
            <label><input type="radio" name="q33" value="D"> D) To extend a class</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>34. How do you create a namespace in TypeScript?</p>
            <label><input type="radio" name="q34" value="A"> A) namespace MyNamespace {}</label><br>
            <label><input type="radio" name="q34" value="B"> B) module MyNamespace {}</label><br>
            <label><input type="radio" name="q34" value="C"> C) class MyNamespace {}</label><br>
            <label><input type="radio" name="q34" value="D"> D) define MyNamespace {}</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>35. What is the purpose of the export keyword?</p>
            <label><input type="radio" name="q35" value="A"> A) To declare a variable</label><br>
            <label><input type="radio" name="q35" value="B"> B) To make a variable available outside the module</label><br>
            <label><input type="radio" name="q35" value="C"> C) To define a class</label><br>
            <label><input type="radio" name="q35" value="D"> D) To import a module</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>36. How do you import a module in TypeScript?</p>
            <label><input type="radio" name="q36" value="A"> A) import { MyModule } from './MyModule';</label><br>
            <label><input type="radio" name="q36" value="B"> B) require('./MyModule');</label><br>
            <label><input type="radio" name="q36" value="C"> C) include './MyModule';</label><br>
            <label><input type="radio" name="q36" value="D"> D) import './MyModule';</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>37. What is a type guard in TypeScript?</p>
            <label><input type="radio" name="q37" value="A"> A) A way to define a type</label><br>
            <label><input type="radio" name="q37" value="B"> B) A way to narrow down types</label><br>
            <label><input type="radio" name="q37" value="C"> C) A type assertion</label><br>
            <label><input type="radio" name="q37" value="D"> D) A type alias</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>38. How do you use type assertions?</p>
            <label><input type="radio" name="q38" value="A"> A) let x = <string>someValue;</label><br>
            <label><input type="radio" name="q38" value="B"> B) let x = someValue as string;</label><br>
            <label><input type="radio" name="q38" value="C"> C) Both A and B</label><br>
            <label><input type="radio" name="q38" value="D"> D) None of the above</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>39. What is the purpose of the unknown type?</p>
            <label><input type="radio" name="q39" value="A"> A) A type that is any value</label><br>
            <label><input type="radio" name="q39" value="B"> B) A type that is not defined</label><br>
            <label><input type="radio" name="q39" value="C"> C) A type that requires type checking</label><br>
            <label><input type="radio" name="q39" value="D"> D) A type that cannot be used</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>40. What is the purpose of the never type?</p>
            <label><input type="radio" name="q40" value="A"> A) A type that represents no value</label><br>
            <label><input type="radio" name="q40" value="B"> B) A type that can hold any value</label><br>
            <label><input type="radio" name="q40" value="C"> C) A type that represents a failed operation</label><br>
            <label><input type="radio" name="q40" value="D"> D) A type that cannot be used</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>41. How do you create a promise in TypeScript?</p>
            <label><input type="radio" name="q41" value="A"> A) new Promise((resolve, reject) => {});</label><br>
            <label><input type="radio" name="q41" value="B"> B) Promise((resolve, reject) => {});</label><br>
            <label><input type="radio" name="q41" value="C"> C) create Promise((resolve, reject) => {});</label><br>
            <label><input type="radio" name="q41" value="D"> D) let promise = new Promise((resolve, reject) => {});</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>42. How do you handle promises in TypeScript?</p>
            <label><input type="radio" name="q42" value="A"> A) .then() and .catch()</label><br>
            <label><input type="radio" name="q42" value="B"> B) .await and .reject()</label><br>
            <label><input type="radio" name="q42" value="C"> C) .handle() and .catch()</label><br>
            <label><input type="radio" name="q42" value="D"> D) .then() and .finally()</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>43. What is async/await in TypeScript?</p>
            <label><input type="radio" name="q43" value="A"> A) A way to write synchronous code</label><br>
            <label><input type="radio" name="q43" value="B"> B) A way to handle promises more cleanly</label><br>
            <label><input type="radio" name="q43" value="C"> C) A way to define a function</label><br>
            <label><input type="radio" name="q43" value="D"> D) A way to declare a variable</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>44. How do you define an interface that extends another interface?</p>
            <label><input type="radio" name="q44" value="A"> A) interface MyInterface extends OtherInterface {}</label><br>
            <label><input type="radio" name="q44" value="B"> B) interface MyInterface implements OtherInterface {}</label><br>
            <label><input type="radio" name="q44" value="C"> C) class MyInterface extends OtherInterface {}</label><br>
            <label><input type="radio" name="q44" value="D"> D) type MyInterface extends OtherInterface {};</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>45. How do you define a tuple in TypeScript?</p>
            <label><input type="radio" name="q45" value="A"> A) let myTuple: [string, number];</label><br>
            <label><input type="radio" name="q45" value="B"> B) let myTuple: (string, number);</label><br>
            <label><input type="radio" name="q45" value="C"> C) let myTuple: string, number[];</label><br>
            <label><input type="radio" name="q45" value="D"> D) let myTuple: Array<string, number>;</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>46. How do you define an enum in TypeScript?</p>
            <label><input type="radio" name="q46" value="A"> A) enum MyEnum { A, B, C }</label><br>
            <label><input type="radio" name="q46" value="B"> B) class MyEnum { A, B, C }</label><br>
            <label><input type="radio" name="q46" value="C"> C) interface MyEnum { A: number; B: number; C: number; }</label><br>
            <label><input type="radio" name="q46" value="D"> D) type MyEnum = { A: number; B: number; C: number; }</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>47. What is a declaration file in TypeScript?</p>
            <label><input type="radio" name="q47" value="A"> A) A file that defines the types for a JavaScript library</label><br>
            <label><input type="radio" name="q47" value="B"> B) A file that declares variables</label><br>
            <label><input type="radio" name="q47" value="C"> C) A file that implements a function</label><br>
            <label><input type="radio" name="q47" value="D"> D) A file that contains a class definition</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>48. How do you define a generic interface in TypeScript?</p>
            <label><input type="radio" name="q48" value="A"> A) interface MyInterface<T> {}</label><br>
            <label><input type="radio" name="q48" value="B"> B) interface MyInterface { <T> }</label><br>
            <label><input type="radio" name="q48" value="C"> C) interface MyInterface<T> extends OtherInterface {}</label><br>
            <label><input type="radio" name="q48" value="D"> D) type MyInterface<T> = {}; </label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>49. What is a type intersection?</p>
            <label><input type="radio" name="q49" value="A"> A) A type that combines multiple types into one</label><br>
            <label><input type="radio" name="q49" value="B"> B) A type that defines a function</label><br>
            <label><input type="radio" name="q49" value="C"> C) A type that extends another type</label><br>
            <label><input type="radio" name="q49" value="D"> B) A type that is a union of all types</label>
        </div>
        
        <div class="question" data-aos="zoom-in">
            <p>50. How do you define a conditional type in TypeScript?</p>
            <label><input type="radio" name="q50" value="A"> A) type MyType<T> = T extends U ? X : Y;</label><br>
            <label><input type="radio" name="q50" value="B"> B) type MyType<T> = if (T extends U) { return X; } else { return Y; }</label><br>
            <label><input type="radio" name="q50" value="C"> C) type MyType<T> = T ? X : Y;</label><br>
            <label><input type="radio" name="q50" value="D"> B) type MyType<T> = T as U ? X : Y;</label>
        </div>
        

        

        <button type="button" class="submit-button" onclick="calculateScore()">Submit</button>
    </form>

    <div class="result" id="result"></div>



    <script src="/java/typeScript.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>AOS.init();</script>
</body>

</html>